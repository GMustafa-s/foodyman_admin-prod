{"version":3,"file":"static/js/1909.8925c2f2.chunk.js","mappings":"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","sources":["views/recepts/recept-edit.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Card, Form, Spin, Steps } from 'antd';\nimport { IMG_URL } from '../../configs/app-global';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../components/language-list';\nimport { steps } from './steps';\nimport recieptService from '../../services/reciept';\n\nconst { Step } = Steps;\n\nconst RecieptEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const { defaultLang } = useSelector((state) => state.formLang, shallowEqual);\n  const [current, setCurrent] = useState(activeMenu.data?.step || 0);\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n  const [image, setImage] = useState(\n    activeMenu.data?.galleries[0]\n      ? [createImage(activeMenu.data.galleries[0].path)]\n      : []\n  );\n  const [back, setBack] = useState(\n    activeMenu.data?.galleries[1]\n      ? [createImage(activeMenu.data.galleries[1].path)]\n      : []\n  );\n  const next = () => {\n    const step = current + 1;\n    setCurrent(step);\n  };\n\n  const prev = () => {\n    const step = current - 1;\n    setCurrent(step);\n  };\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const fetchBox = (id) => {\n    setLoading(true);\n    recieptService\n      .getById(id)\n      .then((res) => {\n        let recept = res.data;\n        form.setFieldsValue({\n          ...recept,\n          title: {\n            [defaultLang]: recept.translation.title,\n          },\n          description: {\n            [defaultLang]: recept.translation.description,\n          },\n          instruction: Object.assign(\n            {},\n            ...recept.instructions.map((ins) => ({\n              [ins.locale]: ins.title,\n            }))\n          ),\n          ingredient: Object.assign(\n            {},\n            ...recept.ingredients.map((ing) => ({\n              [ing.locale]: ing.title,\n            }))\n          ),\n          nutrition: recept.nutritions?.map((nutrition) => ({\n            percentage: nutrition?.percentage?.toString(),\n            weight: nutrition.weight,\n            ...Object.assign(\n              {},\n              ...nutrition.translations.flatMap((translation) => ({\n                [translation.locale]: translation.title,\n              }))\n            ),\n          })),\n          category_id: {\n            value: recept.category.id,\n            label: recept.category.translation?.title,\n          },\n          shop_id: {\n            value: recept.shop.id,\n            label: recept.shop.translation?.title,\n          },\n          stocks: recept.stocks.map((item) => ({\n            stock_id: {\n              value: item.id,\n              label: item?.product?.translation?.title,\n            },\n            ...item,\n          })),\n        });\n        setImage([createImage(recept.galleries[0].path)]);\n        setBack([createImage(recept.galleries[1].path)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const images = [...image, ...back];\n\n  const onFinish = (values) => {\n    form.validateFields();\n    const body = {\n      ...values,\n      category_id: values.category_id.value,\n      images: images.map((img) => img.name),\n      shop_id: values.shop_id.value,\n      active_time: values.active_time.toString(),\n      total_time: values.total_time.toString(),\n      nutrition: values.nutrition.map((item) => ({\n        ...item,\n        percentage: String(item.percentage),\n        weight: String(item.weight),\n      })),\n      stocks: values.stocks?.map((stock) => ({\n        min_quantity: stock.min_quantity,\n        stock_id: stock.stock_id.value,\n      })),\n    };\n\n    setLoadingBtn(true);\n    const nextUrl = 'catalog/recept';\n    recieptService\n      .update(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        navigate(`/${nextUrl}`);\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchBox(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.recepe')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{ active: true, ...activeMenu.data }}\n        >\n          <Steps current={current}>\n            {steps.map((item) => (\n              <Step title={t(item.title)} key={item.title} />\n            ))}\n          </Steps>\n          {steps.map((item) => {\n            const Component = item.content;\n            return (\n              <div\n                key={item.title}\n                className={`steps-content ${\n                  item.step !== current + 1 && 'hidden'\n                }`}\n              >\n                <Component\n                  next={next}\n                  prev={prev}\n                  loading={loadingBtn}\n                  image={image}\n                  setImage={setImage}\n                  back={back}\n                  setBack={setBack}\n                />\n              </div>\n            );\n          })}\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default RecieptEdit;\n"],"names":["Step","Steps","RecieptEdit","_activeMenu$data","_activeMenu$data2","_activeMenu$data3","t","useTranslation","activeMenu","useSelector","state","menu","shallowEqual","id","useParams","dispatch","useDispatch","defaultLang","formLang","current","setCurrent","useState","data","step","createImage","name","url","IMG_URL","image","setImage","galleries","path","back","setBack","next","prev","form","Form","navigate","useNavigate","loading","setLoading","loadingBtn","setLoadingBtn","useEffect","getFieldsValue","setMenuData","images","refetch","recieptService","then","res","_recept$nutritions","_recept$category$tran","_recept$shop$translat","recept","setFieldsValue","title","translation","description","instruction","Object","assign","instructions","map","ins","locale","ingredient","ingredients","ing","nutrition","nutritions","_nutrition$percentage","percentage","toString","weight","translations","flatMap","category_id","value","category","label","shop_id","shop","stocks","item","_item$product","_item$product$transla","stock_id","product","finally","disableRefetch","fetchBox","_jsx","Card","extra","LanguageList","children","className","Spin","size","_jsxs","layout","onFinish","values","_values$stocks","validateFields","body","img","active_time","total_time","String","stock","min_quantity","nextUrl","toast","removeFromMenu","initialValues","active","steps","Component","content"],"sourceRoot":""}