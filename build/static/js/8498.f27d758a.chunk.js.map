{"version":3,"file":"static/js/8498.f27d758a.chunk.js","mappings":"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","sources":["views/banners/banner-clone.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Card, Form, Spin } from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { fetchBanners } from '../../redux/slices/banner';\nimport bannerService from '../../services/banner';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../components/language-list';\nimport getTranslationFields from '../../helpers/getTranslationFields';\nimport BannerForm from './banner-form';\n\nconst BannerClone = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const [loading, setLoading] = useState(false);\n\n  const { languages } = useSelector((state) => state.formLang, shallowEqual);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      uid: item.id,\n      name: item.path,\n      url: item.path,\n    }));\n\n  function getLanguageFields(data) {\n    if (!data) {\n      return {};\n    }\n    const { translations } = data;\n    const result = languages.map((item) => ({\n      [`title[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.title,\n      [`description[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.description,\n      [`button_text[${item.locale}]`]: translations.find(\n        (el) => el.locale === item.locale,\n      )?.button_text,\n    }));\n    return Object.assign({}, ...result);\n  }\n\n  const getBanner = (alias) => {\n    setLoading(true);\n    bannerService\n      .getById(alias)\n      .then((res) => {\n        let banner = res.data;\n\n        const data = {\n          ...banner,\n          img: createImages(banner.galleries),\n          shops: banner.shops?.map((item) => ({\n            label: item.translation?.title,\n            value: item.id,\n          })),\n          ...getLanguageFields(banner),\n        };\n        form.setFieldsValue(data);\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        dispatch(disableRefetch(activeMenu));\n        setLoading(false);\n      });\n  };\n\n  const handleSubmit = (values, image) => {\n    const nextUrl = 'banners';\n    const paramsData = {\n      status: 'published',\n    };\n    const body = {\n      url: values.url,\n      shops: values.shops?.map((i) => i.value),\n      images: image.map((image) => image.name),\n      clickable: values.clickable,\n      title: getTranslationFields(languages, values, 'title'),\n      description: getTranslationFields(languages, values, 'description'),\n      button_text: getTranslationFields(languages, values, 'button_text'),\n    };\n\n    return bannerService.create(body).then(() => {\n      toast.success(t('successfully.cloned'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchBanners(paramsData));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getBanner(id);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('clone.banner')} className='h-100' extra={<LanguageList />}>\n      {!loading ? (\n        <BannerForm form={form} handleSubmit={handleSubmit} />\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default BannerClone;\n"],"names":["BannerClone","t","useTranslation","activeMenu","useSelector","state","menu","shallowEqual","dispatch","useDispatch","form","Form","navigate","useNavigate","id","useParams","loading","setLoading","useState","languages","formLang","useEffect","data","getFieldsValue","setMenuData","getLanguageFields","translations","result","map","item","_translations$find","_translations$find2","_translations$find3","locale","find","el","title","description","button_text","Object","assign","alias","refetch","bannerService","then","res","_banner$shops","banner","img","items","galleries","uid","name","path","url","shops","_item$translation","label","translation","value","setFieldsValue","finally","disableRefetch","_jsx","Card","className","extra","LanguageList","children","Spin","size","BannerForm","handleSubmit","values","image","_values$shops","nextUrl","paramsData","status","body","i","images","clickable","getTranslationFields","toast","batch","removeFromMenu","fetchBanners"],"sourceRoot":""}