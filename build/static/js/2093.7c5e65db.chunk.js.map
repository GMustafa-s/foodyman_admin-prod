{"version":3,"file":"static/js/2093.7c5e65db.chunk.js","mappings":"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","sources":["components/async-select.js","views/seller-views/payment/payment-edit.js","views/seller-views/payment/payment-form.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Select, Spin } from 'antd';\n\nexport const AsyncSelect = ({ fetchOptions, refetch = false, ...props }) => {\n  const [fetching, setFetching] = useState(false);\n  const [options, setOptions] = useState([]);\n\n  const fetchOnFocus = () => {\n    if (!options.length || refetch) {\n      setFetching(true);\n      fetchOptions().then((newOptions) => {\n        setOptions(newOptions);\n        setFetching(false);\n      });\n    }\n  };\n\n  return (\n    <Select\n      labelInValue={true}\n      filterOption={false}\n      notFoundContent={fetching ? <Spin size='small' /> : 'no results'}\n      {...props}\n      options={fetching ? [] : options}\n      onFocus={fetchOnFocus}\n    />\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Card, Form, Spin } from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport paymentService from '../../../services/seller/payment';\nimport { fetchSellerPayments } from '../../../redux/slices/payment';\nimport PaymentForm from './payment-form';\n\nconst SellerPaymentEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getPayment = (id) => {\n    setLoading(true);\n    paymentService\n      .getById(id)\n      .then(({ data }) => {\n        const body = {\n          ...data,\n          payment_id: data.payment.tag,\n          activePayment: {\n            label: data.payment.tag,\n            value: data.payment.id,\n            key: data.payment.id,\n          },\n        };\n\n        form.setFieldsValue({\n          ...body,\n        });\n\n        dispatch(setMenuData({ activeMenu, data: body }));\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const handleSubmit = (values) => {\n    const body = {\n      ...values,\n      payment_id: values.activePayment.value,\n    };\n\n    return paymentService.update(id, body).then(() => {\n      const nextUrl = 'seller/payments';\n      toast.success(t('successfully.updated'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchSellerPayments({}));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getPayment(id);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.payment')} className='h-100'>\n      {!loading ? (\n        <PaymentForm form={form} handleSubmit={handleSubmit} type='edit' />\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default SellerPaymentEdit;\n","import React, { useState } from 'react';\nimport { Button, Col, Form, Input, Row, Switch } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport paymentService from 'services/seller/payment';\nimport { AsyncSelect } from 'components/async-select';\n\nexport default function PaymentForm({ form, handleSubmit, type = 'add' }) {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  //states\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [activePayment, setActivePayment] = useState(\n    activeMenu?.data?.activePayment,\n  );\n\n  //functions\n  async function fetchPayment() {\n    return paymentService.allPayment().then(({ data }) =>\n      data.map((item) => ({\n        label: item?.tag[0].toUpperCase() + item?.tag.substring(1),\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  }\n\n  //submit form\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      activePayment,\n    };\n\n    handleSubmit(body).finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Form\n      layout='vertical'\n      name='user-address'\n      form={form}\n      onFinish={onFinish}\n      initialValues={{ status: true, ...activeMenu?.data }}\n    >\n      <Row gutter={12}>\n        <Col\n          span={\n            activePayment?.label.toLowerCase() === 'cash' ||\n            activePayment?.label.toLowerCase() === 'wallet'\n              ? 12\n              : 24\n          }\n        >\n          <Form.Item\n            label={t('payment')}\n            name='payment_id'\n            rules={[\n              {\n                required: true,\n                message: t('required'),\n              },\n            ]}\n          >\n            <AsyncSelect\n              fetchOptions={fetchPayment}\n              onSelect={(e) => setActivePayment(e)}\n              disabled={type === 'edit'}\n            />\n          </Form.Item>\n        </Col>\n\n        {activePayment?.label.toLowerCase() === 'cash' ||\n        activePayment?.label.toLowerCase() === 'wallet' ? (\n          ''\n        ) : (\n          <>\n            <Col span={12}>\n              <Form.Item\n                label={t('client.id')}\n                name={'client_id'}\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('secret.id')}\n                name={'secret_id'}\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            {activePayment?.label === 'Paystack' ? (\n              <>\n                <Col span={12}>\n                  <Form.Item\n                    label={t('payment.id')}\n                    name={'payment_key'}\n                    rules={[\n                      {\n                        required: true,\n                        message: t('required'),\n                      },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item\n                    label={t('merchant.email')}\n                    name={'merchant_email'}\n                    rules={[\n                      {\n                        required: true,\n                        message: t('required'),\n                      },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n                </Col>\n              </>\n            ) : (\n              ''\n            )}\n          </>\n        )}\n        <Col span={12}>\n          <Form.Item label={t('status')} name='status' valuePropName='checked'>\n            <Switch />\n          </Form.Item>\n        </Col>\n      </Row>\n      <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n        <div className='pb-5'>\n          <Button\n            type='primary'\n            htmlType='submit'\n            loading={loadingBtn}\n            disabled={loadingBtn}\n          >\n            {t('submit')}\n          </Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n"],"names":["AsyncSelect","_ref","fetchOptions","refetch","props","fetching","setFetching","useState","options","setOptions","_jsx","Select","labelInValue","filterOption","notFoundContent","Spin","size","onFocus","fetchOnFocus","length","then","newOptions","SellerPaymentEdit","t","useTranslation","activeMenu","useSelector","state","menu","shallowEqual","dispatch","useDispatch","form","Form","navigate","useNavigate","id","useParams","loading","setLoading","useEffect","data","getFieldsValue","setMenuData","paymentService","body","payment_id","payment","tag","activePayment","label","value","key","setFieldsValue","finally","disableRefetch","getPayment","Card","title","className","children","PaymentForm","handleSubmit","values","nextUrl","toast","batch","removeFromMenu","fetchSellerPayments","type","_activeMenu$data","loadingBtn","setLoadingBtn","setActivePayment","_jsxs","layout","name","onFinish","initialValues","status","Row","gutter","Col","span","toLowerCase","rules","required","message","async","_ref2","map","item","toUpperCase","substring","onSelect","e","disabled","_Fragment","Input","valuePropName","Switch","Button","htmlType"],"sourceRoot":""}