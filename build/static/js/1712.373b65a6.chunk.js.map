{"version":3,"file":"static/js/1712.373b65a6.chunk.js","mappings":"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","sources":["components/refetch-search.js","views/parcel-types/parcel-type.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\nimport debounce from 'lodash/debounce';\nimport { Select, Spin } from 'antd';\n\nexport const RefetchSearch = ({\n  fetchOptions,\n  debounceTimeout = 400,\n  refetch = false,\n  ...props\n}) => {\n  const [fetching, setFetching] = useState(false);\n  const [options, setOptions] = useState([]);\n\n  const debounceFetcher = useMemo(() => {\n    const loadOptions = (value) => {\n      setOptions([]);\n      setFetching(true);\n      fetchOptions(value).then((newOptions) => {\n        setOptions(newOptions);\n        setFetching(false);\n      });\n    };\n    return debounce(loadOptions, debounceTimeout);\n  }, [fetchOptions, debounceTimeout]);\n\n  const fetchOnFocus = () => {\n      debounceFetcher('');\n  };\n\n  return (\n    <Select\n      showSearch\n      allowClear\n      labelInValue={true}\n      onClear={() => debounceFetcher('')}\n      filterOption={false}\n      onSearch={debounceFetcher}\n      notFoundContent={fetching ? <Spin size='small' /> : 'no results'}\n      {...props}\n      options={options}\n      onFocus={fetchOnFocus}\n    />\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Input, Form, Row, Col, Button, Card, InputNumber, Switch } from 'antd';\nimport { toast } from 'react-toastify';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport parcelTypeService from 'services/parcelType';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport createImage from 'helpers/createImage';\nimport Loading from 'components/loading';\nimport MediaUpload from 'components/upload';\nimport { fetchParcelTypes } from 'redux/slices/parcelTypes';\nimport parcelOptionService from 'services/parcel-option';\nimport { RefetchSearch } from 'components/refetch-search';\n\nexport default function ParcelType() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [image, setImage] = useState(activeMenu?.data?.image || []);\n  const [special, setSpecial] = useState(activeMenu?.data?.special);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(\n        setMenuData({ activeMenu, data: { ...activeMenu.data, ...data } })\n      );\n    };\n  }, []);\n\n  const fetchParcel = (id) => {\n    setLoading(true);\n    parcelTypeService\n      .getById(id)\n      .then((res) => {\n        let data = res.data;\n        setImage([createImage(data.img)]);\n        setSpecial(data.special);\n        form.setFieldsValue({\n          ...data,\n          image: [createImage(data.img)],\n          options: data?.options.map((option) => ({\n            label: option.translation?.title,\n            value: option.id,\n          })),\n        });\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      special: Boolean(values.special),\n      special_price: values.special_price || 0,\n      special_price_per_km: values.special_price_per_km || 0,\n      images: image?.map((item) => item.name),\n      image: undefined,\n      options: values.options?.map(option => option.value)\n    };\n\n    const nextUrl = 'parcel-types';\n    if (!id) {\n      parcelTypeService\n        .create(body)\n        .then(() => {\n          dispatch(fetchParcelTypes());\n          toast.success(t('successfully.created'));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          navigate(`/${nextUrl}`);\n        })\n        .finally(() => setLoadingBtn(false));\n    } else {\n      parcelTypeService\n        .update(id, body)\n        .then(() => {\n          dispatch(fetchParcelTypes());\n          toast.success(t('successfully.updated'));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          navigate(`/${nextUrl}`);\n        })\n        .finally(() => setLoadingBtn(false));\n    }\n  };\n\n  const getOptions = async (search) => {\n    return parcelOptionService\n      .getAll({ search })\n      .then(({ data }) =>\n        data.map((item) => ({ label: item.translation?.title, value: item.id }))\n      );\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch && id) {\n      fetchParcel(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={id ? t('edit.parcel.type') : t('add.parcel.type')}>\n      {!loading ? (\n        <Form\n          form={form}\n          name='parcel-type'\n          layout='vertical'\n          initialValues={{ ...activeMenu.data }}\n          onFinish={onFinish}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                label={t('title')}\n                name='type'\n                rules={[\n                  {\n                    validator(_, value) {\n                      if (!value) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2'))\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('image')}\n                name='images'\n                rules={[\n                  {\n                    validator() {\n                      if (image?.length === 0) {\n                        return Promise.reject(new Error(t('required')));\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type='languages'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('start.price')}\n                name='price'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber min={0} className='w-100' />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('price.per.km')}\n                name='price_per_km'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber min={0} className='w-100' />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('min_width')}\n                name='min_width'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber\n                  min={0}\n                  max={32678}\n                  className='w-100'\n                  addonAfter='sm'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('max_width')}\n                name='max_width'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber\n                  min={0}\n                  max={32678}\n                  className='w-100'\n                  addonAfter='sm'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('min_height')}\n                name='min_height'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber\n                  min={0}\n                  max={32678}\n                  className='w-100'\n                  addonAfter='sm'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('max_height')}\n                name='max_height'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber\n                  min={0}\n                  max={32678}\n                  className='w-100'\n                  addonAfter='sm'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('min_length')}\n                name='min_length'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber\n                  min={0}\n                  max={32678}\n                  className='w-100'\n                  addonAfter='sm'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('max_length')}\n                name='max_length'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber\n                  min={0}\n                  max={32678}\n                  className='w-100'\n                  addonAfter='sm'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('min_weight')}\n                name='min_g'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber\n                  min={0}\n                  max={32678}\n                  className='w-100'\n                  addonAfter='gramm'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('max_weight')}\n                name='max_g'\n                rules={[{ required: true, message: t('required') }]}\n              >\n                <InputNumber\n                  min={0}\n                  max={2147000000}\n                  className='w-100'\n                  addonAfter='gramm'\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item label={t('options')} name='options'>\n                <RefetchSearch fetchOptions={getOptions} mode='multiple' />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item label={t('max.range')} name=\"max_range\">\n                <InputNumber min={0} className='w-100' addonAfter=\"km\" />\n              </Form.Item>\n            </Col>\n            <Col span={24}>\n              <Form.Item\n                label={t('special')}\n                name='special'\n                valuePropName='checked'\n              >\n                <Switch onChange={(value) => setSpecial(value)} />\n              </Form.Item>\n            </Col>\n            {!!special && (\n              <>\n                <Col span={12}>\n                  <Form.Item\n                    label={t('start.price')}\n                    name='special_price'\n                    rules={[{ required: true, message: t('required') }]}\n                  >\n                    <InputNumber min={0} className='w-100' />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item\n                    label={t('price.per.km')}\n                    name='special_price_per_km'\n                    rules={[{ required: true, message: t('required') }]}\n                  >\n                    <InputNumber min={0} className='w-100' />\n                  </Form.Item>\n                </Col>\n              </>\n            )}\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('save')}\n          </Button>\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n}\n"],"names":["RefetchSearch","_ref","fetchOptions","debounceTimeout","refetch","props","fetching","setFetching","useState","options","setOptions","debounceFetcher","useMemo","debounce","value","then","newOptions","_jsx","Select","showSearch","allowClear","labelInValue","onClear","filterOption","onSearch","notFoundContent","Spin","size","onFocus","fetchOnFocus","ParcelType","_activeMenu$data","_activeMenu$data2","t","useTranslation","navigate","useNavigate","id","useParams","dispatch","useDispatch","form","Form","activeMenu","useSelector","state","menu","shallowEqual","loading","setLoading","loadingBtn","setLoadingBtn","image","setImage","data","special","setSpecial","useEffect","getFieldsValue","setMenuData","parcelTypeService","res","createImage","img","setFieldsValue","map","option","_option$translation","label","translation","title","finally","disableRefetch","fetchParcel","Card","children","Loading","_jsxs","name","layout","initialValues","onFinish","values","_values$options","body","Boolean","special_price","special_price_per_km","images","item","undefined","nextUrl","fetchParcelTypes","toast","removeFromMenu","Row","gutter","Col","span","rules","validator","_","trim","Promise","reject","Error","length","resolve","Input","MediaUpload","type","imageList","setImageList","multiple","required","message","InputNumber","min","className","max","addonAfter","async","parcelOptionService","search","_item$translation","mode","valuePropName","Switch","onChange","_Fragment","Button","htmlType"],"sourceRoot":""}