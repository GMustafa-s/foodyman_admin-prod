{"version":3,"file":"static/js/8445.aeb3528d.chunk.js","mappings":"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","sources":["components/search.js","views/seller-views/story/story-edit.js","views/seller-views/story/story-form.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\nimport debounce from 'lodash/debounce';\nimport { Select, Spin } from 'antd';\n\nexport const DebounceSelect = ({\n  fetchOptions,\n  debounceTimeout = 400,\n  onClear,\n  ...props\n}) => {\n  const [fetching, setFetching] = useState(false);\n  const [options, setOptions] = useState([]);\n\n  const debounceFetcher = useMemo(() => {\n    const loadOptions = (value) => {\n      setOptions([]);\n      setFetching(true);\n      fetchOptions(value).then((newOptions) => {\n        setOptions(newOptions);\n        setFetching(false);\n      });\n    };\n    return debounce(loadOptions, debounceTimeout);\n  }, [fetchOptions, debounceTimeout]);\n\n  const fetchOnFocus = () => {\n      debounceFetcher('');\n  };\n\n  return (\n    <Select\n      showSearch\n      allowClear\n      labelInValue={true}\n      filterOption={false}\n      onSearch={debounceFetcher}\n      onClear={() => {\n        debounceFetcher('');\n        !!onClear && onClear();\n      }}\n      notFoundContent={fetching ? <Spin size='small' /> : 'no results'}\n      {...props}\n      options={options}\n      onFocus={fetchOnFocus}\n    />\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Card, Form } from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, removeFromMenu, setMenuData } from 'redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport storeisService from 'services/seller/storeis';\nimport { fetchStoreis } from 'redux/slices/storeis';\nimport Loading from 'components/loading';\nimport StoryForm from './story-form';\n\nconst StoreisEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const { myShop: shop } = useSelector((state) => state.myShop, shallowEqual);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const createImages = (items) =>\n    items.map((item) => ({\n      name: item,\n      url: item,\n    }));\n\n  const getStory = (alias) => {\n    setLoading(true);\n    storeisService\n      .getById(alias)\n      .then(({ data }) => {\n        const body = {\n          ...data,\n          image: createImages(data?.file_urls),\n          products: {\n            label: data?.product?.translation?.title,\n            value: data?.product?.id,\n          },\n        };\n        dispatch(setMenuData({ activeMenu, data: body }));\n        form.setFieldsValue({ ...body });\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const handleSubmit = (values, image) => {\n    const body = {\n      ...Object.assign(\n        {},\n        ...image.map((item, index) => ({\n          [`file_urls[${index}]`]: item.name,\n        })),\n      ),\n      product_id: values.products.value,\n    };\n    const nextUrl = 'seller/stories';\n\n    return storeisService.update(id, body).then(() => {\n      const data = {\n        shop_id: shop.id,\n      };\n      toast.success(t('successfully.updated'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchStoreis(data));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getStory(id);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.story')} className='h-100'>\n      {!loading ? (\n        <StoryForm form={form} handleSubmit={handleSubmit} />\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n};\n\nexport default StoreisEdit;\n","import React, { useState } from 'react';\nimport { Button, Col, Form, Row } from 'antd';\nimport { DebounceSelect } from 'components/search';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport productService from 'services/seller/product';\nimport MediaUpload from 'components/upload';\n\nexport default function StoryForm({ form, handleSubmit }) {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { myShop: shop } = useSelector((state) => state.myShop, shallowEqual);\n\n  //states\n  const [image, setImage] = useState(activeMenu.data?.image ?? []);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  //functions\n  function fetchProductsStock(search) {\n    const data = {\n      search,\n      shop_id: shop.id,\n      status: 'published',\n      active: 1,\n      rest: 1,\n    };\n\n    return productService.getAll(data).then((res) =>\n      res.data.map((product) => ({\n        label: product.translation.title,\n        value: product.id,\n        key: product.id,\n      })),\n    );\n  }\n\n  //submit form\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    handleSubmit(values, image).finally(() => setLoadingBtn(false));\n  };\n  return (\n    <Form\n      name='story-form'\n      layout='vertical'\n      onFinish={onFinish}\n      form={form}\n      initialValues={{ active: true, ...activeMenu.data }}\n      className='d-flex flex-column h-100'\n    >\n      <Row gutter={12}>\n        <Col span={24}>\n          <Form.Item\n            label={t('image')}\n            name='images'\n            rules={[\n              {\n                required: image.length === 0,\n                message: t('required'),\n              },\n            ]}\n          >\n            <MediaUpload\n              type='categories'\n              imageList={image}\n              setImageList={setImage}\n              form={form}\n              multiple={false}\n            />\n          </Form.Item>\n        </Col>\n\n        <Col span={24}>\n          <Form.Item\n            label={t('products')}\n            name={'products'}\n            rules={[\n              {\n                required: true,\n                message: t('required'),\n              },\n            ]}\n          >\n            <DebounceSelect\n              fetchOptions={fetchProductsStock}\n              debounceTimeout={200}\n            />\n          </Form.Item>\n        </Col>\n      </Row>\n      <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n        <div className='pb-5'>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n"],"names":["DebounceSelect","_ref","fetchOptions","debounceTimeout","onClear","props","fetching","setFetching","useState","options","setOptions","debounceFetcher","useMemo","debounce","value","then","newOptions","_jsx","Select","showSearch","allowClear","labelInValue","filterOption","onSearch","notFoundContent","Spin","size","onFocus","fetchOnFocus","StoreisEdit","t","useTranslation","activeMenu","useSelector","state","menu","shallowEqual","dispatch","useDispatch","form","Form","navigate","useNavigate","id","useParams","myShop","shop","loading","setLoading","useEffect","data","getFieldsValue","setMenuData","alias","refetch","storeisService","_data$product","_data$product$transla","_data$product2","body","image","items","file_urls","map","item","name","url","products","label","product","translation","title","setFieldsValue","finally","disableRefetch","Card","className","children","Loading","StoryForm","handleSubmit","values","Object","assign","index","product_id","nextUrl","shop_id","toast","batch","removeFromMenu","fetchStoreis","_activeMenu$data$imag","_activeMenu$data","setImage","loadingBtn","setLoadingBtn","_jsxs","layout","onFinish","initialValues","active","Row","gutter","Col","span","rules","required","length","message","MediaUpload","type","imageList","setImageList","multiple","search","status","rest","productService","res","key","Button","htmlType"],"sourceRoot":""}