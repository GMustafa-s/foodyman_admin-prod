{"version":3,"file":"static/js/7076.7d9bd54f.chunk.js","mappings":"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","sources":["views/languages/language-add.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Input, Form, Row, Col, Button, Card, Switch, Select } from 'antd';\nimport { toast } from 'react-toastify';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport languagesService from '../../services/languages';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport createImage from '../../helpers/createImage';\nimport Loading from '../../components/loading';\nimport MediaUpload from '../../components/upload';\nimport { fetchLang } from '../../redux/slices/languages';\nimport lang from '../../helpers/lang.json';\nimport useDemo from '../../helpers/useDemo';\n\nexport default function LanguageAdd() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const { isDemo } = useDemo();\n  const [image, setImage] = useState(\n    activeMenu?.data?.image ? [activeMenu?.data?.image] : []\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(\n        setMenuData({ activeMenu, data: { ...activeMenu.data, ...data } })\n      );\n    };\n  }, []);\n\n  const fetchLanguage = (id) => {\n    setLoading(true);\n    languagesService\n      .getById(id)\n      .then((res) => {\n        let language = res.data;\n        setImage([createImage(language.img)]);\n        form.setFieldsValue({\n          ...language,\n          image: [createImage(language.img)],\n        });\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      title: values?.title,\n      locale: values?.locale,\n      images: image.length ? [image[0]?.name] : undefined,\n      active: Number(values?.active),\n      backward: values?.backward,\n      default: values?.default,\n    };\n\n    const nextUrl = 'settings/languages';\n    if (!id) {\n      languagesService\n        .create(body)\n        .then(() => {\n          dispatch(fetchLang());\n          toast.success(t('successfully.created'));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          navigate(`/${nextUrl}`);\n        })\n        .finally(() => setLoadingBtn(false));\n    } else {\n      languagesService\n        .update(id, body)\n        .then(() => {\n          dispatch(fetchLang());\n          toast.success(t('successfully.updated'));\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          navigate(`/${nextUrl}`);\n        })\n        .finally(() => setLoadingBtn(false));\n    }\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch && id) {\n      fetchLanguage(id);\n    }\n  }, [activeMenu.refetch]);\n\n  const options = lang.map((item) => ({\n    label: item?.Native_name.toUpperCase() + ' ' + item.Language_name,\n    value: item.short_code,\n    key: item.Native_name,\n  }));\n\n  return (\n    <Card title={id ? t('edit.language') : t('add.language')}>\n      {!loading ? (\n        <Form\n          form={form}\n          name='form'\n          layout='vertical'\n          initialValues={{\n            ...activeMenu.data,\n            active: false,\n            backward: false,\n            default: false,\n          }}\n          onFinish={onFinish}\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                label={t('title')}\n                name='title'\n                rules={[\n                  {\n                    validator(_, value) {\n                      if (!value) {\n                        return Promise.reject(new Error(t('required')));\n                      } else if (value && value?.trim() === '') {\n                        return Promise.reject(new Error(t('no.empty.space')));\n                      } else if (value && value?.trim().length < 2) {\n                        return Promise.reject(\n                          new Error(t('must.be.at.least.2'))\n                        );\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('short.code')}\n                name='locale'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Select\n                  filterOption={(input, option) =>\n                    (option?.label ?? '').includes(input)\n                  }\n                  filterSort={(optionA, optionB) =>\n                    (optionA?.label ?? '')\n                      .toLowerCase()\n                      .localeCompare((optionB?.label ?? '').toLowerCase())\n                  }\n                  showSearch\n                  allowClear\n                  options={options}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={6}>\n              <Form.Item\n                label={t('image')}\n                name='images'\n                rules={[\n                  {\n                    validator() {\n                      if (image?.length === 0) {\n                        return Promise.reject(new Error(t('required')));\n                      }\n                      return Promise.resolve();\n                    },\n                  },\n                ]}\n              >\n                <MediaUpload\n                  type='languages'\n                  imageList={image}\n                  setImageList={setImage}\n                  form={form}\n                  multiple={false}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={6}>\n              <Form.Item\n                label={t('active')}\n                name='active'\n                valuePropName='checked'\n              >\n                <Switch />\n              </Form.Item>\n            </Col>\n            <Col span={6}>\n              <Form.Item label='RTL' name='backward' valuePropName='checked'>\n                <Switch />\n              </Form.Item>\n            </Col>\n            <Col span={6}>\n              <Form.Item\n                label={t('default')}\n                name='default'\n                valuePropName='checked'\n              >\n                <Switch disabled={isDemo} />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('save')}\n          </Button>\n        </Form>\n      ) : (\n        <Loading />\n      )}\n    </Card>\n  );\n}\n"],"names":["LanguageAdd","_activeMenu$data","_activeMenu$data2","t","useTranslation","navigate","useNavigate","id","useParams","dispatch","useDispatch","form","Form","activeMenu","useSelector","state","menu","shallowEqual","loading","setLoading","useState","loadingBtn","setLoadingBtn","isDemo","useDemo","image","setImage","data","useEffect","getFieldsValue","setMenuData","refetch","languagesService","then","res","language","createImage","img","setFieldsValue","finally","disableRefetch","fetchLanguage","options","lang","item","label","Native_name","toUpperCase","Language_name","value","short_code","key","_jsx","Card","title","children","Loading","_jsxs","name","layout","initialValues","active","backward","default","onFinish","values","_image$","body","locale","images","length","undefined","Number","nextUrl","fetchLang","toast","removeFromMenu","Row","gutter","Col","span","rules","validator","_","trim","Promise","reject","Error","resolve","Input","required","message","Select","filterOption","input","option","_option$label","includes","filterSort","optionA","optionB","_optionA$label","_optionB$label","toLowerCase","localeCompare","showSearch","allowClear","MediaUpload","type","imageList","setImageList","multiple","valuePropName","Switch","disabled","Button","htmlType"],"sourceRoot":""}