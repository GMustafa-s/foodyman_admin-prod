{"version":3,"file":"static/js/4270.6c498d19.chunk.js","mappings":"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","sources":["views/email-provider/email-edit.js","views/email-provider/email-form.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Card, Form } from 'antd';\nimport { shallowEqual, useDispatch, useSelector, batch } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport emailService from '../../services/emailSettings';\nimport Loading from '../../components/loading';\nimport { fetchEmailProvider } from 'redux/slices/emailProvider';\nimport EmailProviderForm from './email-form';\n\nconst EmailProviderEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getEmailProvider = (alias) => {\n    setLoading(true);\n    emailService\n      .getById(alias)\n      .then((res) => {\n        let emailProvider = res.data;\n\n        const data = {\n          ...emailProvider,\n        };\n        form.setFieldsValue(data);\n        dispatch(setMenuData({ activeMenu, data }));\n      })\n      .finally(() => {\n        dispatch(disableRefetch(activeMenu));\n        setLoading(false);\n      });\n  };\n\n  const handleSubmit = (values) => {\n    const body = {\n      smtp_auth: values.smtp_auth,\n      smtp_debug: values.smtp_debug,\n      port: values.port,\n      password: values.password,\n      from_to: values.from_to,\n      host: values.host,\n      active: values.active,\n      from_site: values.from_site,\n    };\n    const nextUrl = 'settings/emailProviders';\n\n    return emailService.update(id, body).then(() => {\n      toast.success(t('successfully.updated'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchEmailProvider({}));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      getEmailProvider(id);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.email.provider')} className='h-100'>\n      {loading ? (\n        <Loading />\n      ) : (\n        <EmailProviderForm form={form} handleSubmit={handleSubmit} />\n      )}\n    </Card>\n  );\n};\n\nexport default EmailProviderEdit;\n","import React, { useState } from 'react';\nimport { Button, Col, Form, Input, InputNumber, Row, Switch } from 'antd';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nexport default function EmailProviderForm({ form, handleSubmit }) {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  //states\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  // submit form\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    handleSubmit(values).finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Form\n      name='email-provider-form'\n      layout='vertical'\n      onFinish={onFinish}\n      form={form}\n      initialValues={{\n        smtp_debug: true,\n        smtp_auth: true,\n        active: true,\n        ...activeMenu.data,\n      }}\n      className='d-flex flex-column h-100'\n    >\n      <Row gutter={12}>\n        <Col span={12}>\n          <Form.Item\n            rules={[\n              {\n                required: true,\n                message: t('required'),\n              },\n              {\n                type: 'email',\n                message: t('invalid.email'),\n              },\n            ]}\n            label={t('email')}\n            name='from_to'\n          >\n            <Input placeholder='Email' />\n          </Form.Item>\n        </Col>\n\n        <Col span={12}>\n          <Form.Item\n            rules={[\n              {\n                required: true,\n                message: t('required'),\n              },\n              {\n                type: 'string',\n                min: 6,\n                message: t('min.6.letters'),\n              },\n            ]}\n            label={t('password')}\n            name='password'\n            normalize={(value) =>\n              value?.trim() === '' ? value?.trim() : value\n            }\n          >\n            <Input.Password />\n          </Form.Item>\n        </Col>\n\n        <Col span={12}>\n          <Form.Item\n            rules={[\n              {\n                validator(_, value) {\n                  if (!value) {\n                    return Promise.reject(new Error(t('required')));\n                  } else if (value && value?.trim() === '') {\n                    return Promise.reject(new Error(t('no.empty.space')));\n                  } else if (value && value?.trim().length < 2) {\n                    return Promise.reject(new Error(t('must.be.at.least.2')));\n                  }\n                  return Promise.resolve();\n                },\n              },\n            ]}\n            label={t('host')}\n            name='host'\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n\n        <Col span={12}>\n          <Form.Item\n            rules={[\n              {\n                required: true,\n                message: t('required'),\n              },\n            ]}\n            label={t('port')}\n            name='port'\n          >\n            <InputNumber min={0} className='w-100' />\n          </Form.Item>\n        </Col>\n\n        <Col span={12}>\n          <Form.Item\n            rules={[\n              {\n                required: true,\n                message: t('required'),\n              },\n            ]}\n            label={t('from.site')}\n            name='from_site'\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n\n        <Col span={8}>\n          <Form.Item label={t('active')} name='active' valuePropName='checked'>\n            <Switch />\n          </Form.Item>\n        </Col>\n\n        <Col span={8}>\n          <Form.Item\n            valuePropName='checked'\n            label={t('smtp_debug')}\n            name='smtp_debug'\n          >\n            <Switch />\n          </Form.Item>\n        </Col>\n\n        <Col span={8}>\n          <Form.Item\n            valuePropName='checked'\n            label={t('smtp_auth')}\n            name='smtp_auth'\n          >\n            <Switch />\n          </Form.Item>\n        </Col>\n      </Row>\n      <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n        <div className='pb-5'>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n"],"names":["EmailProviderEdit","t","useTranslation","activeMenu","useSelector","state","menu","shallowEqual","dispatch","useDispatch","form","Form","navigate","useNavigate","id","useParams","loading","setLoading","useState","useEffect","data","getFieldsValue","setMenuData","alias","refetch","emailService","then","res","setFieldsValue","finally","disableRefetch","_jsx","Card","title","className","children","Loading","EmailProviderForm","handleSubmit","values","body","smtp_auth","smtp_debug","port","password","from_to","host","active","from_site","nextUrl","toast","batch","removeFromMenu","fetchEmailProvider","_ref","loadingBtn","setLoadingBtn","_jsxs","name","layout","onFinish","initialValues","Row","gutter","Col","span","rules","required","message","type","label","Input","placeholder","min","normalize","value","trim","validator","_","Promise","reject","Error","length","resolve","InputNumber","valuePropName","Switch","Button","htmlType"],"sourceRoot":""}