{"version":3,"file":"static/js/828.a07fcaac.chunk.js","mappings":"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","sources":["views/seller-views/recepts/recept-edit.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Card, Form, Spin, Steps } from 'antd';\nimport { IMG_URL } from '../../../configs/app-global';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport {\n  disableRefetch,\n  removeFromMenu,\n  setMenuData,\n} from '../../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport LanguageList from '../../../components/language-list';\nimport { steps } from './steps';\nimport sellerReceptService from '../../../services/seller/reciept';\n\nconst { Step } = Steps;\n\nconst RecieptEdit = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const { defaultLang, languages } = useSelector(\n    (state) => state.formLang,\n    shallowEqual\n  );\n  const [current, setCurrent] = useState(activeMenu.data?.step || 0);\n  const [image, setImage] = useState(\n    activeMenu.data?.image ? [activeMenu.data?.image] : []\n  );\n  const next = () => {\n    const step = current + 1;\n    setCurrent(step);\n  };\n\n  const prev = () => {\n    const step = current - 1;\n    setCurrent(step);\n  };\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createImage = (name) => {\n    return {\n      name,\n      url: IMG_URL + name,\n    };\n  };\n\n  const fetchBox = (id) => {\n    setLoading(true);\n    sellerReceptService\n      .getById(id)\n      .then((res) => {\n        let recept = res.data;\n        console.log('recept', recept);\n        form.setFieldsValue({\n          ...recept,\n          active_time: Number(recept.active_time),\n          total_time: Number(recept.total_time),\n          title: {\n            [defaultLang]: recept.translation.title,\n          },\n          description: {\n            [defaultLang]: recept.translation.description,\n          },\n          instruction: Object.assign(\n            {},\n            ...recept.instructions.map((ins) => ({\n              [ins.locale]: ins.title,\n            }))\n          ),\n          ingredient: Object.assign(\n            {},\n            ...recept.ingredients.map((ing) => ({\n              [ing.locale]: ing.title,\n            }))\n          ),\n          nutrition: recept.nutritions?.map((nutrition) => ({\n            percentage: Number(nutrition?.percentage),\n            weight: Number(nutrition?.weight),\n            ...Object.assign(\n              {},\n              ...nutrition.translations.flatMap((translation) => ({\n                [translation.locale]: translation.title,\n              }))\n            ),\n          })),\n          category_id: {\n            value: recept.category.id,\n            label: recept.category.translation.title,\n          },\n          stocks: recept.stocks.map((item) => ({\n            stock_id: {\n              value: item.id,\n              label: item.product.translation.title,\n            },\n            ...item,\n          })),\n        });\n        setImage([createImage(recept.img)]);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  };\n\n  const onFinish = (values) => {\n    form.validateFields();\n    const body = {\n      ...values,\n      total_time: values.total_time.toString(),\n      active_time: values.active_time.toString(),\n      category_id: values.category_id.value,\n      images: image?.map((img) => img.name),\n      stocks: values.stocks.map((stock) => ({\n        min_quantity: stock.min_quantity,\n        stock_id: stock.stock_id.value,\n      })),\n      nutrition: values.nutrition?.map((nutrition) => ({\n        ...nutrition,\n        percentage: nutrition?.percentage?.toString(),\n        weight: nutrition.weight.toString(),\n      })),\n    };\n    setLoadingBtn(true);\n    const nextUrl = 'seller/recept';\n    sellerReceptService\n      .update(id, body)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        navigate(`/${nextUrl}`);\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n      })\n      .finally(() => setLoadingBtn(false));\n  };\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchBox(id);\n    }\n  }, [activeMenu.refetch]);\n\n  return (\n    <Card title={t('edit.recepe')} extra={<LanguageList />}>\n      {!loading ? (\n        <Form\n          layout='vertical'\n          onFinish={onFinish}\n          form={form}\n          initialValues={{ active: true, ...activeMenu.data }}\n        >\n          <Steps current={current}>\n            {steps.map((item) => (\n              <Step title={t(item.title)} key={item.title} />\n            ))}\n          </Steps>\n          {steps.map((item) => {\n            const Component = item.content;\n            return (\n              <div\n                key={item.title}\n                className={`steps-content ${\n                  item.step !== current + 1 && 'hidden'\n                }`}\n              >\n                <Component\n                  next={next}\n                  prev={prev}\n                  loading={loadingBtn}\n                  image={image}\n                  setImage={setImage}\n                />\n              </div>\n            );\n          })}\n        </Form>\n      ) : (\n        <div className='d-flex justify-content-center align-items-center'>\n          <Spin size='large' className='py-5' />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default RecieptEdit;\n"],"names":["Step","Steps","RecieptEdit","_activeMenu$data","_activeMenu$data2","_activeMenu$data3","t","useTranslation","activeMenu","useSelector","state","menu","shallowEqual","id","useParams","dispatch","useDispatch","defaultLang","languages","formLang","current","setCurrent","useState","data","step","image","setImage","next","prev","form","Form","navigate","useNavigate","loading","setLoading","loadingBtn","setLoadingBtn","useEffect","getFieldsValue","setMenuData","refetch","sellerReceptService","then","res","_recept$nutritions","recept","name","console","log","setFieldsValue","active_time","Number","total_time","title","translation","description","instruction","Object","assign","instructions","map","ins","locale","ingredient","ingredients","ing","nutrition","nutritions","percentage","weight","translations","flatMap","category_id","value","category","label","stocks","item","stock_id","product","img","url","IMG_URL","finally","disableRefetch","fetchBox","_jsx","Card","extra","LanguageList","children","className","Spin","size","_jsxs","layout","onFinish","values","_values$nutrition","validateFields","body","toString","images","stock","min_quantity","_nutrition$percentage","nextUrl","toast","removeFromMenu","initialValues","active","steps","Component","content"],"sourceRoot":""}