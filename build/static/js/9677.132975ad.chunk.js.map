{"version":3,"file":"static/js/9677.132975ad.chunk.js","mappings":"gUAUe,SAASA,IACtB,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,MACPC,GAAQC,EAAAA,EAAAA,WACT,WAAEC,IAAeC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,MAAMC,EAAAA,IACpDC,GAAWC,EAAAA,EAAAA,OAEVC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAYC,IAAiBF,EAAAA,EAAAA,WAAS,IAE7CG,EAAAA,EAAAA,YAAU,IACD,KACL,MAAMC,EAAOf,EAAKgB,gBAAe,GACjCT,GAASU,EAAAA,EAAAA,IAAY,CAAEf,WAAAA,EAAYa,KAAAA,OAEpC,IASH,SAASG,IACPR,GAAW,GACXS,EAAAA,EAAAA,MAEGC,MAAMC,IACL,MAAMN,EAZYO,CAAAA,IACtB,MAAMC,EAASD,EAAKE,KAAKC,IAAI,CAC3B,CAACA,EAAKC,KAAMD,EAAKE,UAEnB,OAAOC,OAAOC,OAAO,MAAON,IAQXO,CAAeT,EAAIN,MAChCf,EAAK+B,eAAehB,MAErBiB,SAAQ,KACPtB,GAAW,GACXH,GAAS0B,EAAAA,EAAAA,IAAe/B,QAI9BY,EAAAA,EAAAA,YAAU,KACJZ,EAAWgC,SACbhB,MAED,CAAChB,EAAWgC,UAiBf,OACEC,EAAAA,EAAAA,KAAClC,EAAAA,EAAI,CACHmC,OAAO,WACPpC,KAAMA,EACNqC,KAAK,kBACLC,SATcC,IAXlB,IAAwBxB,EAAAA,EAYPwB,EAXf1B,GAAc,GACdM,EAAAA,EAAAA,OACUJ,GACPK,MAAK,KACJoB,EAAAA,GAAAA,QAAc1C,EAAE,yBAChBS,GAASkC,EAAAA,EAAAA,UAEVT,SAAQ,IAAMnB,GAAc,MAa7B6B,cAAe,IAAKxC,EAAWa,MAAO4B,SAEpClC,GA2DA0B,EAAAA,EAAAA,KAACS,EAAAA,EAAO,KA1DRT,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACHC,MAAOhD,EAAE,mBACTiD,OACEZ,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CACLC,KAAK,UACLC,QAASA,IAAMlD,EAAKmD,SACpB1C,QAASG,EAAW+B,SAEnB7C,EAAE,UAEN6C,UAEDS,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,OAAQ,GAAGX,SAAA,EACdR,EAAAA,EAAAA,KAACoB,EAAAA,EAAG,CAACC,KAAM,GAAGb,UACZR,EAAAA,EAAAA,KAAClC,EAAAA,EAAAA,KAAS,CACRwD,MAAO,YACPpB,KAAK,YACLqB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS9D,EAAE,cAEb6C,UAEFR,EAAAA,EAAAA,KAAC0B,EAAAA,EAAK,SAGV1B,EAAAA,EAAAA,KAACoB,EAAAA,EAAG,CAACC,KAAM,GAAGb,UACZR,EAAAA,EAAAA,KAAClC,EAAAA,EAAAA,KAAS,CACRwD,MAAO,WACPpB,KAAK,WACLqB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS9D,EAAE,cAEb6C,UAEFR,EAAAA,EAAAA,KAAC0B,EAAAA,EAAK,SAGV1B,EAAAA,EAAAA,KAACoB,EAAAA,EAAG,CAACC,KAAM,GAAGb,UACZR,EAAAA,EAAAA,KAAClC,EAAAA,EAAAA,KAAS,CACRwD,MAAO,UACPpB,KAAK,UACLqB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS9D,EAAE,cAEb6C,UAEFR,EAAAA,EAAAA,KAAC0B,EAAAA,EAAK","sources":["views/settings/socialSettings.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Card, Col, Form, Input, Row } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport settingService from '../../services/settings';\nimport { toast } from 'react-toastify';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { disableRefetch, setMenuData } from '../../redux/slices/menu';\nimport { fetchSettings as getSettings } from '../../redux/slices/globalSettings';\nimport Loading from '../../components/loading';\n\nexport default function SocialSettings() {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n\n  const [loading, setLoading] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n  }, []);\n\n  const createSettings = (list) => {\n    const result = list.map((item) => ({\n      [item.key]: item.value,\n    }));\n    return Object.assign({}, ...result);\n  };\n\n  function fetchSettings() {\n    setLoading(true);\n    settingService\n      .get()\n      .then((res) => {\n        const data = createSettings(res.data);\n        form.setFieldsValue(data);\n      })\n      .finally(() => {\n        setLoading(false);\n        dispatch(disableRefetch(activeMenu));\n      });\n  }\n\n  useEffect(() => {\n    if (activeMenu.refetch) {\n      fetchSettings();\n    }\n  }, [activeMenu.refetch]);\n\n  function updateSettings(data) {\n    setLoadingBtn(true);\n    settingService\n      .update(data)\n      .then(() => {\n        toast.success(t('successfully.updated'));\n        dispatch(getSettings());\n      })\n      .finally(() => setLoadingBtn(false));\n  }\n\n  const onFinish = (values) => {\n    updateSettings(values);\n  };\n\n  return (\n    <Form\n      layout='vertical'\n      form={form}\n      name='global-settings'\n      onFinish={onFinish}\n      initialValues={{ ...activeMenu.data }}\n    >\n      {!loading ? (\n        <Card\n          title={t('social.settings')}\n          extra={\n            <Button\n              type='primary'\n              onClick={() => form.submit()}\n              loading={loadingBtn}\n            >\n              {t('save')}\n            </Button>\n          }\n        >\n          <Row gutter={12}>\n            <Col span={12}>\n              <Form.Item\n                label={'Instagram'}\n                name='instagram'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={'Facebook'}\n                name='facebook'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={'Twitter'}\n                name='twitter'\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n          </Row>\n        </Card>\n      ) : (\n        <Loading />\n      )}\n    </Form>\n  );\n}\n"],"names":["SocialSettings","t","useTranslation","form","Form","activeMenu","useSelector","state","menu","shallowEqual","dispatch","useDispatch","loading","setLoading","useState","loadingBtn","setLoadingBtn","useEffect","data","getFieldsValue","setMenuData","fetchSettings","settingService","then","res","list","result","map","item","key","value","Object","assign","createSettings","setFieldsValue","finally","disableRefetch","refetch","_jsx","layout","name","onFinish","values","toast","getSettings","initialValues","children","Loading","Card","title","extra","Button","type","onClick","submit","_jsxs","Row","gutter","Col","span","label","rules","required","message","Input"],"sourceRoot":""}