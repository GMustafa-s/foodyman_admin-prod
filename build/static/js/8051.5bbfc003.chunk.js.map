{"version":3,"file":"static/js/8051.5bbfc003.chunk.js","mappings":"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","sources":["views/email-provider/email-add.js","views/email-provider/email-form.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Card, Form } from 'antd';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../redux/slices/menu';\nimport { useTranslation } from 'react-i18next';\nimport emailService from '../../services/emailSettings';\nimport { fetchEmailProvider } from 'redux/slices/emailProvider';\nimport EmailProviderForm from './email-form';\n\nconst EmailProviderAdd = () => {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      dispatch(setMenuData({ activeMenu, data }));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleSubmit = (values) => {\n    const body = {\n      smtp_auth: values.smtp_auth,\n      smtp_debug: values.smtp_debug,\n      port: values.port,\n      password: values.password,\n      from_to: values.from_to,\n      host: values.host,\n      active: Number(values.active),\n      from_site: values.from_site,\n    };\n    const nextUrl = 'settings/emailProviders';\n\n    return emailService.create(body).then(() => {\n      toast.success(t('successfully.created'));\n      batch(() => {\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        dispatch(fetchEmailProvider({}));\n      });\n      navigate(`/${nextUrl}`);\n    });\n  };\n\n  return (\n    <Card title={t('add.email.provider')} className='h-100'>\n      <EmailProviderForm form={form} handleSubmit={handleSubmit} />\n    </Card>\n  );\n};\n\nexport default EmailProviderAdd;\n","import React, { useState } from 'react';\nimport { Button, Col, Form, Input, InputNumber, Row, Switch } from 'antd';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nexport default function EmailProviderForm({ form, handleSubmit }) {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  //states\n  const [loadingBtn, setLoadingBtn] = useState(false);\n\n  // submit form\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    handleSubmit(values).finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Form\n      name='email-provider-form'\n      layout='vertical'\n      onFinish={onFinish}\n      form={form}\n      initialValues={{\n        smtp_debug: true,\n        smtp_auth: true,\n        active: true,\n        ...activeMenu.data,\n      }}\n      className='d-flex flex-column h-100'\n    >\n      <Row gutter={12}>\n        <Col span={12}>\n          <Form.Item\n            rules={[\n              {\n                required: true,\n                message: t('required'),\n              },\n              {\n                type: 'email',\n                message: t('invalid.email'),\n              },\n            ]}\n            label={t('email')}\n            name='from_to'\n          >\n            <Input placeholder='Email' />\n          </Form.Item>\n        </Col>\n\n        <Col span={12}>\n          <Form.Item\n            rules={[\n              {\n                required: true,\n                message: t('required'),\n              },\n              {\n                type: 'string',\n                min: 6,\n                message: t('min.6.letters'),\n              },\n            ]}\n            label={t('password')}\n            name='password'\n            normalize={(value) =>\n              value?.trim() === '' ? value?.trim() : value\n            }\n          >\n            <Input.Password />\n          </Form.Item>\n        </Col>\n\n        <Col span={12}>\n          <Form.Item\n            rules={[\n              {\n                validator(_, value) {\n                  if (!value) {\n                    return Promise.reject(new Error(t('required')));\n                  } else if (value && value?.trim() === '') {\n                    return Promise.reject(new Error(t('no.empty.space')));\n                  } else if (value && value?.trim().length < 2) {\n                    return Promise.reject(new Error(t('must.be.at.least.2')));\n                  }\n                  return Promise.resolve();\n                },\n              },\n            ]}\n            label={t('host')}\n            name='host'\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n\n        <Col span={12}>\n          <Form.Item\n            rules={[\n              {\n                required: true,\n                message: t('required'),\n              },\n            ]}\n            label={t('port')}\n            name='port'\n          >\n            <InputNumber min={0} className='w-100' />\n          </Form.Item>\n        </Col>\n\n        <Col span={12}>\n          <Form.Item\n            rules={[\n              {\n                required: true,\n                message: t('required'),\n              },\n            ]}\n            label={t('from.site')}\n            name='from_site'\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n\n        <Col span={8}>\n          <Form.Item label={t('active')} name='active' valuePropName='checked'>\n            <Switch />\n          </Form.Item>\n        </Col>\n\n        <Col span={8}>\n          <Form.Item\n            valuePropName='checked'\n            label={t('smtp_debug')}\n            name='smtp_debug'\n          >\n            <Switch />\n          </Form.Item>\n        </Col>\n\n        <Col span={8}>\n          <Form.Item\n            valuePropName='checked'\n            label={t('smtp_auth')}\n            name='smtp_auth'\n          >\n            <Switch />\n          </Form.Item>\n        </Col>\n      </Row>\n      <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n        <div className='pb-5'>\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('submit')}\n          </Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n"],"names":["EmailProviderAdd","t","useTranslation","activeMenu","useSelector","state","menu","shallowEqual","dispatch","useDispatch","form","Form","navigate","useNavigate","useEffect","data","getFieldsValue","setMenuData","_jsx","Card","title","className","children","EmailProviderForm","handleSubmit","values","body","smtp_auth","smtp_debug","port","password","from_to","host","active","Number","from_site","nextUrl","emailService","then","toast","batch","removeFromMenu","fetchEmailProvider","_ref","loadingBtn","setLoadingBtn","useState","_jsxs","name","layout","onFinish","finally","initialValues","Row","gutter","Col","span","rules","required","message","type","label","Input","placeholder","min","normalize","value","trim","validator","_","Promise","reject","Error","length","resolve","InputNumber","valuePropName","Switch","Button","htmlType","loading"],"sourceRoot":""}