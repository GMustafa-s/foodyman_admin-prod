{"version":3,"file":"static/js/7656.79c78e59.chunk.js","mappings":"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","sources":["components/async-select.js","views/seller-views/payment/payment-add.js","views/seller-views/payment/payment-form.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Select, Spin } from 'antd';\n\nexport const AsyncSelect = ({ fetchOptions, refetch = false, ...props }) => {\n  const [fetching, setFetching] = useState(false);\n  const [options, setOptions] = useState([]);\n\n  const fetchOnFocus = () => {\n    if (!options.length || refetch) {\n      setFetching(true);\n      fetchOptions().then((newOptions) => {\n        setOptions(newOptions);\n        setFetching(false);\n      });\n    }\n  };\n\n  return (\n    <Select\n      labelInValue={true}\n      filterOption={false}\n      notFoundContent={fetching ? <Spin size='small' /> : 'no results'}\n      {...props}\n      options={fetching ? [] : options}\n      onFocus={fetchOnFocus}\n    />\n  );\n};\n","import React from 'react';\nimport { Card, Form } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { removeFromMenu, setRefetch } from '../../../redux/slices/menu';\nimport { batch, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { fetchSellerPayments } from '../../../redux/slices/payment';\nimport paymentService from '../../../services/seller/payment';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport PaymentForm from './payment-form';\n\nexport default function SellerPaymentAdd() {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const handleSubmit = (values) => {\n    const body = {\n      ...values,\n      payment_id: values.payment_id.value,\n    };\n\n    return paymentService\n      .create(body)\n      .then(() => {\n        const nextUrl = 'seller/payments';\n        toast.success(t('successfully.created'));\n        batch(() => {\n          dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n          dispatch(fetchSellerPayments({}));\n        });\n        navigate(`/${nextUrl}`);\n      })\n      .catch((err) => console.error(err));\n  };\n\n  return (\n    <Card title={t('add.payment')} className='h-100'>\n      <PaymentForm form={form} handleSubmit={handleSubmit} />\n    </Card>\n  );\n}\n","import React, { useState } from 'react';\nimport { Button, Col, Form, Input, Row, Switch } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport paymentService from 'services/seller/payment';\nimport { AsyncSelect } from 'components/async-select';\n\nexport default function PaymentForm({ form, handleSubmit, type = 'add' }) {\n  const { t } = useTranslation();\n  const { activeMenu } = useSelector((state) => state.menu, shallowEqual);\n\n  //states\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [activePayment, setActivePayment] = useState(\n    activeMenu?.data?.activePayment,\n  );\n\n  //functions\n  async function fetchPayment() {\n    return paymentService.allPayment().then(({ data }) =>\n      data.map((item) => ({\n        label: item?.tag[0].toUpperCase() + item?.tag.substring(1),\n        value: item?.id,\n        key: item?.id,\n      })),\n    );\n  }\n\n  //submit form\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      ...values,\n      activePayment,\n    };\n\n    handleSubmit(body).finally(() => setLoadingBtn(false));\n  };\n\n  return (\n    <Form\n      layout='vertical'\n      name='user-address'\n      form={form}\n      onFinish={onFinish}\n      initialValues={{ status: true, ...activeMenu?.data }}\n    >\n      <Row gutter={12}>\n        <Col\n          span={\n            activePayment?.label.toLowerCase() === 'cash' ||\n            activePayment?.label.toLowerCase() === 'wallet'\n              ? 12\n              : 24\n          }\n        >\n          <Form.Item\n            label={t('payment')}\n            name='payment_id'\n            rules={[\n              {\n                required: true,\n                message: t('required'),\n              },\n            ]}\n          >\n            <AsyncSelect\n              fetchOptions={fetchPayment}\n              onSelect={(e) => setActivePayment(e)}\n              disabled={type === 'edit'}\n            />\n          </Form.Item>\n        </Col>\n\n        {activePayment?.label.toLowerCase() === 'cash' ||\n        activePayment?.label.toLowerCase() === 'wallet' ? (\n          ''\n        ) : (\n          <>\n            <Col span={12}>\n              <Form.Item\n                label={t('client.id')}\n                name={'client_id'}\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                label={t('secret.id')}\n                name={'secret_id'}\n                rules={[\n                  {\n                    required: true,\n                    message: t('required'),\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </Col>\n            {activePayment?.label === 'Paystack' ? (\n              <>\n                <Col span={12}>\n                  <Form.Item\n                    label={t('payment.id')}\n                    name={'payment_key'}\n                    rules={[\n                      {\n                        required: true,\n                        message: t('required'),\n                      },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item\n                    label={t('merchant.email')}\n                    name={'merchant_email'}\n                    rules={[\n                      {\n                        required: true,\n                        message: t('required'),\n                      },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n                </Col>\n              </>\n            ) : (\n              ''\n            )}\n          </>\n        )}\n        <Col span={12}>\n          <Form.Item label={t('status')} name='status' valuePropName='checked'>\n            <Switch />\n          </Form.Item>\n        </Col>\n      </Row>\n      <div className='flex-grow-1 d-flex flex-column justify-content-end'>\n        <div className='pb-5'>\n          <Button\n            type='primary'\n            htmlType='submit'\n            loading={loadingBtn}\n            disabled={loadingBtn}\n          >\n            {t('submit')}\n          </Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n"],"names":["AsyncSelect","_ref","fetchOptions","refetch","props","fetching","setFetching","useState","options","setOptions","_jsx","Select","labelInValue","filterOption","notFoundContent","Spin","size","onFocus","fetchOnFocus","length","then","newOptions","SellerPaymentAdd","t","useTranslation","form","Form","activeMenu","useSelector","state","menu","shallowEqual","dispatch","useDispatch","navigate","useNavigate","Card","title","className","children","PaymentForm","handleSubmit","values","body","payment_id","value","paymentService","nextUrl","toast","batch","removeFromMenu","fetchSellerPayments","catch","err","console","error","_activeMenu$data","type","loadingBtn","setLoadingBtn","activePayment","setActivePayment","data","_jsxs","layout","name","onFinish","finally","initialValues","status","Row","gutter","Col","span","label","toLowerCase","rules","required","message","async","_ref2","map","item","tag","toUpperCase","substring","id","key","onSelect","e","disabled","_Fragment","Input","valuePropName","Switch","Button","htmlType","loading"],"sourceRoot":""}