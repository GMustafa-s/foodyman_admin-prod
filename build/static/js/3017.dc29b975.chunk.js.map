{"version":3,"file":"static/js/3017.dc29b975.chunk.js","mappings":"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","sources":["views/user/user-add.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  DatePicker,\n  Form,\n  Input,\n  InputNumber,\n  Row,\n  Select,\n} from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { removeFromMenu, setMenuData } from '../../redux/slices/menu';\nimport userService from '../../services/user';\nimport { fetchClients } from '../../redux/slices/client';\nimport { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport MediaUpload from '../../components/upload';\n\nexport default function UserAdd() {\n  const { t } = useTranslation();\n  const [form] = Form.useForm();\n  const [error, setError] = useState(null);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const navigate = useNavigate();\n\n  const activeMenu = useSelector((list) => list.menu.activeMenu);\n  const dispatch = useDispatch();\n  const [image, setImage] = useState(\n    activeMenu?.data?.image ? [activeMenu?.data?.image] : []\n  );\n\n  useEffect(() => {\n    return () => {\n      const data = form.getFieldsValue(true);\n      data.birthday = JSON.stringify(data?.birthday);\n      dispatch(\n        setMenuData({ activeMenu, data: { ...activeMenu.data, ...data } })\n      );\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onFinish = (values) => {\n    setLoadingBtn(true);\n    const body = {\n      firstname: values.firstname,\n      lastname: values.lastname,\n      email: values.user_email,\n      phone: values.phone,\n      birthday: moment(values.birthday).format('YYYY-MM-DD'),\n      gender: values.gender,\n      password_confirmation: values.password_confirmation,\n      password: values.password,\n      images: image[0] ? [image[0]?.name] : undefined,\n    };\n    const nextUrl = 'users/user';\n    userService\n      .create(body)\n      .then(() => {\n        toast.success(t('successfully.created'));\n        dispatch(removeFromMenu({ ...activeMenu, nextUrl }));\n        navigate(`/${nextUrl}`);\n        dispatch(fetchClients());\n      })\n      .catch((err) => setError(err.response.data.params))\n      .finally(() => setLoadingBtn(false));\n  };\n\n  const getInitialTimes = () => {\n    if (!activeMenu.data?.birthday) {\n      return {};\n    }\n    const birthday = JSON.parse(activeMenu.data?.birthday);\n    return {\n      birthday: moment(birthday),\n    };\n  };\n\n  return (\n    <Card title={t('add.user')}>\n      <Form\n        form={form}\n        layout='vertical'\n        initialValues={{\n          gender: 'male',\n          ...activeMenu.data,\n          ...getInitialTimes(),\n        }}\n        onFinish={onFinish}\n      >\n        <Row gutter={12}>\n          <Col span={24}>\n            <Form.Item\n              rules={[\n                {\n                  validator() {\n                    if (image?.length === 0) {\n                      return Promise.reject(new Error(t('required')));\n                    }\n                    return Promise.resolve();\n                  },\n                },\n              ]}\n              label={t('avatar')}\n              name='images'\n            >\n              <MediaUpload\n                type='users'\n                imageList={image}\n                setImageList={setImage}\n                form={form}\n                multiple={false}\n              />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('firstname')}\n              name='firstname'\n              help={error?.firstname ? error.firstname[0] : null}\n              validateStatus={error?.firstname ? 'error' : 'success'}\n              rules={[\n                {\n                  validator(_, value) {\n                    if (!value) {\n                      return Promise.reject(new Error(t('required')));\n                    } else if (value && value?.trim() === '') {\n                      return Promise.reject(new Error(t('no.empty.space')));\n                    } else if (value && value?.trim().length < 2) {\n                      return Promise.reject(new Error(t('must.be.at.least.2')));\n                    }\n                    return Promise.resolve();\n                  },\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={'lastname'}\n              name='lastname'\n              help={error?.lastname ? error.lastname[0] : null}\n              validateStatus={error?.lastname ? 'error' : 'success'}\n              rules={[\n                {\n                  validator(_, value) {\n                    if (!value) {\n                      return Promise.reject(new Error(t('required')));\n                    } else if (value && value?.trim() === '') {\n                      return Promise.reject(new Error(t('no.empty.space')));\n                    } else if (value && value?.trim().length < 2) {\n                      return Promise.reject(new Error(t('must.be.at.least.2')));\n                    }\n                    return Promise.resolve();\n                  },\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('phone')}\n              name='phone'\n              help={error?.phone ? error.phone[0] : null}\n              validateStatus={error?.phone ? 'error' : 'success'}\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <InputNumber min={0} className='w-100' />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('birthday')}\n              name='birthday'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <DatePicker\n                className='w-100'\n                disabledDate={(current) =>\n                  moment().add(-18, 'years') <= current\n                }\n                defaultPickerValue={moment().add(-18, 'years')}\n              />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('gender')}\n              name='gender'\n              rules={[{ required: true, message: t('required') }]}\n            >\n              <Select picker='dayTime' className='w-100'>\n                <Select.Option value='male'>{t('male')}</Select.Option>\n                <Select.Option value='female'>{t('female')}</Select.Option>\n              </Select>\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('email')}\n              name='user_email'\n              help={error?.email ? error.email[0] : null}\n              validateStatus={error?.email ? 'error' : 'success'}\n              rules={[\n                { required: true, message: t('required') },\n                {\n                  type: 'email',\n                  message: t('invalid.email'),\n                },\n              ]}\n            >\n              <Input type='email' />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('password')}\n              name='password'\n              help={error?.password ? error.password[0] : null}\n              validateStatus={error?.password ? 'error' : 'success'}\n              rules={[\n                { required: true, message: t('required') },\n                {\n                  validator(_, value) {\n                    if (value && value?.toString().length < 6) {\n                      return Promise.reject(new Error(t('min.6.letters')));\n                    }\n                    return Promise.resolve();\n                  },\n                },\n              ]}\n              normalize={(value) =>\n                value?.trim() === '' ? value?.trim() : value\n              }\n            >\n              <Input.Password type='password' className='w-100' />\n            </Form.Item>\n          </Col>\n\n          <Col span={12}>\n            <Form.Item\n              label={t('password.confirmation')}\n              help={\n                error?.password_confirmation\n                  ? error.password_confirmation[0]\n                  : null\n              }\n              validateStatus={\n                error?.password_confirmation ? 'error' : 'success'\n              }\n              name='password_confirmation'\n              dependencies={['password']}\n              hasFeedback\n              rules={[\n                {\n                  required: true,\n                  message: t('required'),\n                },\n                ({ getFieldValue }) => ({\n                  validator(rule, value) {\n                    if (!value || getFieldValue('password') === value) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject(t('two.passwords.dont.match'));\n                  },\n                }),\n              ]}\n              normalize={(value) =>\n                value?.trim() === '' ? value?.trim() : value\n              }\n            >\n              <Input.Password type='password' />\n            </Form.Item>\n          </Col>\n\n          <Button type='primary' htmlType='submit' loading={loadingBtn}>\n            {t('save')}\n          </Button>\n        </Row>\n      </Form>\n    </Card>\n  );\n}\n"],"names":["UserAdd","_activeMenu$data","_activeMenu$data2","t","useTranslation","form","Form","error","setError","useState","loadingBtn","setLoadingBtn","navigate","useNavigate","activeMenu","useSelector","list","menu","dispatch","useDispatch","image","setImage","data","useEffect","getFieldsValue","birthday","JSON","stringify","setMenuData","_jsx","Card","title","children","layout","initialValues","gender","getInitialTimes","_activeMenu$data3","_activeMenu$data4","parse","moment","onFinish","values","_image$","body","firstname","lastname","email","user_email","phone","format","password_confirmation","password","images","name","undefined","nextUrl","userService","then","toast","removeFromMenu","fetchClients","catch","err","response","params","finally","_jsxs","Row","gutter","Col","span","rules","validator","length","Promise","reject","Error","resolve","label","MediaUpload","type","imageList","setImageList","multiple","help","validateStatus","_","value","trim","Input","required","message","InputNumber","min","className","DatePicker","disabledDate","current","add","defaultPickerValue","Select","picker","toString","normalize","dependencies","hasFeedback","_ref","getFieldValue","rule","Button","htmlType","loading"],"sourceRoot":""}